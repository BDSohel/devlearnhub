-- phpMyAdmin SQL Dump
-- version 5.1.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3306
-- Generation Time: Apr 27, 2023 at 12:09 PM
-- Server version: 5.7.31
-- PHP Version: 7.4.26

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `devlearnhub`
--

-- --------------------------------------------------------

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
CREATE TABLE IF NOT EXISTS `category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `category_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `category_slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `category_slogan` text COLLATE utf8_unicode_ci,
  `category_keyword` text COLLATE utf8_unicode_ci,
  `category_description` text COLLATE utf8_unicode_ci,
  `status` decimal(1,0) NOT NULL DEFAULT '1' COMMENT '1=default/active,0=inactive',
  `category_order` decimal(2,0) NOT NULL,
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `category`
--

INSERT INTO `category` (`category_id`, `category_name`, `category_slug`, `category_slogan`, `category_keyword`, `category_description`, `status`, `category_order`) VALUES
(1, 'Full Stack Development', 'full-stack-development', '\"Build it all with Full Stack Development - Your one-stop solution for web development.\"', 'Full Stack Development, web development, frontend development, backend development, programming languages, web applications.', 'Full Stack Development is the complete package for web development, including both frontend and backend development. With proficiency in programming languages like HTML, CSS, JavaScript, Python, and more, our developers can create responsive and dynamic web applications. From designing to deploying, we\'ve got you covered. Partner with us for a hassle-free web development experience.', '1', '1'),
(2, 'Front-end Development', 'front-end-development', '\"Crafting beautiful and intuitive user experiences with front-end development!\"', 'Front-end development, user interface design, user experience design, HTML, CSS, JavaScript, responsive design, accessibility, web performance optimization, web standards, cross-browser compatibility, front-end frameworks, React, Angular, Vue.js, Bootstrap, wireframing, prototyping, visual design, interactive design, web development trends, front-end testing, front-end tools, version control, debugging, front-end best practices.', 'Front-end development is the process of creating the user interface and user experience of a website or web application. It involves using various technologies like HTML, CSS, and JavaScript to build the visual and interactive elements of a website.\r\n\r\nHTML (Hypertext Markup Language) is the foundation of front-end development. It is used to create the structure and content of web pages, including headings, paragraphs, lists, links, and images. CSS (Cascading Style Sheets) is used to style the web page, including the layout, colors, fonts, and other visual elements. JavaScript is used to add interactivity and dynamic functionality to the web page, such as animations, form validation, and user input handling.\r\n\r\nFront-end developers work closely with designers to create visually appealing and user-friendly interfaces. They also collaborate with back-end developers to ensure that the front-end and back-end systems work seamlessly together.\r\n\r\nFront-end development is constantly evolving, and new technologies and frameworks are being introduced all the time. Popular front-end frameworks include React, Angular, Vue.js, and Bootstrap, which provide pre-built components and libraries to streamline the development process. In addition, front-end developers need to be proficient in responsive design, accessibility, and web performance optimization to create high-quality, user-friendly, and fast-loading web pages.', '1', '2'),
(3, 'Back-end Development', 'back-end-development', '\"Empowering your website', 'Back-end development, server-side programming, web development, programming languages, PHP, Python, Ruby, Node.js, Java, web frameworks, Ruby on Rails, Django, Laravel, Express.js, database management, SQL, NoSQL, REST APIs, web security, authentication, authorization, web performance optimization, scalability, cloud computing, server administration, DevOps, version control, debugging, testing, back-end architecture, microservices, message queues, caching, data storage, deployment.', 'Back-end development is the process of creating the server-side logic and infrastructure of a website or web application. It involves building the components that interact with the database, manage server-side processing, and communicate with the front-end components of a website or application.  Back-end developers use programming languages like PHP, Python, Ruby, Java, and JavaScript (with Node.js) to build the server-side components of a website. They use web frameworks like Ruby on Rails, Django, Laravel, and Express.js to speed up development and ensure best practices.  Back-end developers focus on building databases, managing server-side processing, and handling data flow between the server and the front-end components of a website or application. They also focus on optimizing the performance and scalability of web applications to ensure they can handle high traffic and perform well under load.  Back-end development is a complex and ever-evolving field that requires a wide range of skills, including database management, web security, scalability, cloud computing, server administration, and DevOps. Back-end developers need to be proficient in version control, debugging, testing, and deployment. They also need to be able to work closely with front-end developers to ensure a seamless user experience and a robust and secure web application.', '1', '3'),
(4, 'Web Security', 'web-security', '\"Securing your online presence, one byte at a time: Trust us for comprehensive web security solutions!\"', 'Web security, network security, cybersecurity, SSL, HTTPS, encryption, authentication, authorization, OWASP, cross-site scripting (XSS), cross-site request forgery (CSRF), SQL injection, man-in-the-middle (MITM) attacks, firewalls, intrusion detection, penetration testing, vulnerability assessments, security policies, access control, identity management, web application firewalls, secure coding practices, threat modeling, secure design patterns, web security tools.', 'Web security refers to the practice of protecting websites and web applications from unauthorized access, theft of data, and other cyberattacks. It encompasses a range of technologies, tools, and best practices that aim to secure web assets from various types of online threats, including malicious attacks, data breaches, and identity theft. Web security involves implementing encryption, authentication, and authorization mechanisms to ensure that only authorized individuals can access web resources. It also involves protecting against various types of attacks such as cross-site scripting, SQL injection, and man-in-the-middle attacks, and implementing measures to prevent unauthorized access, such as firewalls, intrusion detection systems, and access control. Effective web security also requires the adoption of secure coding practices and regular vulnerability assessments, and penetration testing to identify and fix vulnerabilities before they can be exploited by attackers.', '0', '4'),
(5, 'Web Performance & Optimization', 'web-performance-optimization', '\"Fast websites mean happy users: Optimize your web performance today!\"', 'Web performance optimization, website speed, website performance, page load time, user experience, caching, image optimization, content delivery networks (CDNs), compression, minification, lazy loading, HTTP/2, responsive design, mobile optimization, browser caching, server response time, performance testing, performance metrics, Google PageSpeed Insights, GTmetrix, Pingdom, web analytics, performance budgets, performance audits, performance monitoring.', 'Web performance optimization (WPO) refers to the process of improving the speed and performance of a website or web application to enhance the user experience. It involves using various techniques and tools to optimize the loading speed of web pages, reduce page size, and improve server response times. WPO strategies include implementing caching and compression, optimizing images and videos, using content delivery networks (CDNs), minifying and compressing code, and leveraging HTTP/2. Other key factors in WPO include mobile optimization, responsive design, browser caching, and reducing server response time. WPO also involves measuring and analyzing performance metrics to identify areas for improvement and using performance budgets and audits to optimize performance continually. By optimizing the performance of a website, web performance optimization can improve user experience, increase engagement, and lead to higher conversion rates.', '1', '5');

-- --------------------------------------------------------

--
-- Table structure for table `courses`
--

DROP TABLE IF EXISTS `courses`;
CREATE TABLE IF NOT EXISTS `courses` (
  `course_id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` int(11) NOT NULL,
  `course_title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `course_slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `course_thumb` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `course_image` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `overview` text COLLATE utf8_unicode_ci NOT NULL,
  `course_meta_keyword` text COLLATE utf8_unicode_ci,
  `course_meta_description` text COLLATE utf8_unicode_ci,
  `hit` int(11) NOT NULL,
  `is_featured` int(11) NOT NULL DEFAULT '0' COMMENT '0=No,1=Yes',
  `active_status` decimal(1,0) NOT NULL DEFAULT '1' COMMENT '1=default/active,0=inactive',
  `course_fee` decimal(10,2) NOT NULL,
  `user_id` int(11) NOT NULL,
  `added_on` datetime NOT NULL,
  `edited_on` datetime DEFAULT NULL,
  PRIMARY KEY (`course_id`),
  UNIQUE KEY `course_slug` (`course_slug`),
  KEY `category_id` (`category_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `courses`
--

INSERT INTO `courses` (`course_id`, `category_id`, `course_title`, `course_slug`, `course_thumb`, `course_image`, `overview`, `course_meta_keyword`, `course_meta_description`, `hit`, `is_featured`, `active_status`, `course_fee`, `user_id`, `added_on`, `edited_on`) VALUES
(11, 2, 'About Route Namespace & Usage', 'about-route-namespace-usage', 'about-route-namespace-usage-thumb.jpg', 'about-route-namespace-usage.jpg', 'Route namespaces in CodeIgniter 4 allow you to group a set of controllers under a common namespace. This can be useful for organizing controllers in larger applications, where you may have many different controllers with different responsibilities.\r\n\r\nTo define a namespace for a set of routes, you can use the $routes->group() method and specify the namespace using the setNamespace() method. For example:', 'Route namespaces in CodeIgniter 4 allow you to group a set of controllers under a common namespace. This can be useful for organizing controllers in larger applications, where you may have many different controllers with different responsibilities.  To define a namespace for a set of routes, you can use the $routes->group() method and specify the namespace using the setNamespace() method. For example:', 'Route namespaces in CodeIgniter 4 allow you to group a set of controllers under a common namespace. This can be useful for organizing controllers in larger applications, where you may have many different controllers with different responsibilities.\r\n\r\nTo define a namespace for a set of routes, you can use the $routes->group() method and specify the namespace using the setNamespace() method. For example:', 9, 0, '1', '0.00', 1, '2023-04-20 12:24:23', '2023-04-20 12:53:42'),
(12, 1, 'What is a Route Group', 'what-is-a-route-group', 'what-is-a-route-group-thumb.jpg', 'what-is-a-route-group.jpg', 'In CodeIgniter 4, a route group is a way to group related routes together and apply common attributes or middleware to all of them. This can be useful for organizing routes within your application and reducing duplication in your code.\r\n\r\nTo define a route group, you can use the $routes->group() method. The first parameter is the URL prefix for the group, and the second parameter is a closure that defines the routes within the group. Here\'s an example:', 'In CodeIgniter 4, a route group is a way to group related routes together and apply common attributes or middleware to all of them. This can be useful for organizing routes within your application and reducing duplication in your code.  To define a route group, you can use the $routes->group() method. The first parameter is the URL prefix for the group, and the second parameter is a closure that defines the routes within the group. Here\'s an example:', 'In CodeIgniter 4, a route group is a way to group related routes together and apply common attributes or middleware to all of them. This can be useful for organizing routes within your application and reducing duplication in your code.\r\n\r\nTo define a route group, you can use the $routes->group() method. The first parameter is the URL prefix for the group, and the second parameter is a closure that defines the routes within the group. Here\'s an example:', 24, 1, '1', '0.00', 1, '2023-04-20 12:26:02', '2023-04-26 00:21:50'),
(14, 1, 'Learn CodeIgniter 4 API Development Using JWT Authentication', 'learn-codeigniter-4-api-development-using-jwt-authentication', 'learn-codeigniter-4-api-development-using-jwt-authentication-thumb.jpg', 'learn-codeigniter-4-api-development-using-jwt-authentication.jpg', '<p>\"Learn CodeIgniter 4 API Development Using JWT Authentication\" is a course on Udemy that covers the development of RESTful APIs with CodeIgniter 4 and the implementation of JSON Web Token (JWT) authentication. This course is taught by Raja Tamil, who is an experienced web developer and trainer.</p>\r\n<p>In this course, you\'ll learn the following:</p>\r\n<p>Setting up the CodeIgniter 4 project and creating RESTful APIs<br>Implementing JWT authentication to secure the APIs<br>Creating CRUD (Create, Read, Update, Delete) operations using RESTful APIs<br>Uploading files and images to the server using RESTful APIs<br>Handling errors and exceptions in the APIs<br>Testing the APIs using Postman<br>The course includes 10 hours of video content, along with downloadable resources and quizzes to help you reinforce your learning. The instructor provides clear explanations and practical examples throughout the course, making it easy to follow along and apply what you\'ve learned.</p>\r\n<p>Overall, if you\'re looking to learn how to develop RESTful APIs with CodeIgniter 4 and implement JWT authentication, this course is definitely worth considering.</p>', 'Learn CodeIgniter 4, API Development, Using JWT Authentication', '\"Learn CodeIgniter 4 API Development Using JWT Authentication\" is a course on Udemy that covers the development of RESTful APIs with CodeIgniter 4 and the implementation of JSON Web Token (JWT) authentication. This course is taught by Raja Tamil, who is an experienced web developer and trainer.\r\n\r\nIn this course, you\'ll learn the following:\r\n\r\nSetting up the CodeIgniter 4 project and creating RESTful APIs\r\nImplementing JWT authentication to secure the APIs\r\nCreating CRUD (Create, Read, Update, Delete) operations using RESTful APIs\r\nUploading files and images to the server using RESTful APIs\r\nHandling errors and exceptions in the APIs\r\nTesting the APIs using Postman\r\nThe course includes 10 hours of video content, along with downloadable resources and quizzes to help you reinforce your learning. The instructor provides clear explanations and practical examples throughout the course, making it easy to follow along and apply what you\'ve learned.\r\n\r\nOverall, if you\'re looking to learn how to develop RESTful APIs with CodeIgniter 4 and implement JWT authentication, this course is definitely worth considering.', 337, 1, '1', '0.00', 1, '2023-04-27 10:46:52', '2023-04-27 10:51:17');

-- --------------------------------------------------------

--
-- Table structure for table `course_topics`
--

DROP TABLE IF EXISTS `course_topics`;
CREATE TABLE IF NOT EXISTS `course_topics` (
  `topics_id` int(11) NOT NULL AUTO_INCREMENT,
  `course_id` int(11) NOT NULL,
  `topics_title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `topics_slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `topics_order` int(255) NOT NULL,
  `topics_hit` int(11) NOT NULL,
  `added_on` datetime NOT NULL,
  `edited_on` datetime DEFAULT NULL,
  PRIMARY KEY (`topics_id`),
  KEY `course_id` (`course_id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `course_topics`
--

INSERT INTO `course_topics` (`topics_id`, `course_id`, `topics_title`, `topics_slug`, `topics_order`, `topics_hit`, `added_on`, `edited_on`) VALUES
(1, 12, 'good moning slug', 'good-moning-slug', 1, 25, '2023-04-20 13:19:30', NULL),
(2, 12, 'another topics ok', 'another-topics-ok', 2, 24, '2023-04-20 13:20:20', '2023-04-20 13:41:38'),
(5, 11, 'post 2 topics', 'post-2-topics', 1, 9, '2023-04-20 13:21:12', NULL),
(6, 11, 'topics another 2', 'topics-another-2', 2, 10, '2023-04-20 13:21:19', '2023-04-20 13:42:56'),
(9, 14, 'What we will learn', 'what-we-will-learn', 1, 325, '2023-04-27 10:47:44', '2023-04-27 16:23:37'),
(10, 14, 'CodeIgniter 4 Setup Installation', 'codeigniter-4-setup-installation', 2, 324, '2023-04-27 10:47:50', NULL),
(12, 14, 'Understand Application Default Landing Page', 'understand-application-default-landing-page', 4, 336, '2023-04-27 10:48:06', NULL),
(13, 14, 'About PHP Spark CLI', 'about-php-spark-cli', 5, 329, '2023-04-27 10:48:11', NULL),
(14, 14, 'Create First Program', 'create-first-program', 6, 338, '2023-04-27 10:48:18', NULL),
(15, 14, 'Database Connectivity with Application', 'database-connectivity-with-application', 7, 332, '2023-04-27 10:48:24', NULL),
(16, 14, 'What is Migration & How to Use it?', 'what-is-migration-how-to-use-it', 8, 334, '2023-04-27 10:48:30', '2023-04-27 10:50:51'),
(17, 14, 'How To Use Query Builder', 'how-to-use-query-builder', 9, 337, '2023-04-27 10:48:37', '2023-04-27 16:26:12'),
(18, 14, 'How to Work with Models', 'how-to-work-with-models', 10, 283, '2023-04-27 10:48:45', '2023-04-27 16:26:08'),
(19, 14, 'What is Seeder & How to use it?', 'what-is-seeder-how-to-use-it', 11, 318, '2023-04-27 10:48:53', '2023-04-27 10:50:41'),
(20, 14, 'What are Route Methods', 'what-are-route-methods', 12, 314, '2023-04-27 10:49:13', '2023-04-27 16:24:06'),
(21, 14, 'What is a Route Group?', 'what-is-a-route-group', 13, 319, '2023-04-27 10:50:17', NULL),
(22, 14, 'About Route Namespace & Usage', 'about-route-namespace-usage', 14, 320, '2023-04-27 10:50:24', NULL),
(23, 14, 'Complete basics of Filters & Why we use it?', 'complete-basics-of-filters-why-we-use-it', 15, 321, '2023-04-27 10:50:29', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `course_topics_details`
--

DROP TABLE IF EXISTS `course_topics_details`;
CREATE TABLE IF NOT EXISTS `course_topics_details` (
  `topics_detail_id` int(11) NOT NULL AUTO_INCREMENT,
  `topics_id` int(11) NOT NULL,
  `topics_type` decimal(1,0) NOT NULL COMMENT '1=text,2=code,3=image',
  `topics_details_title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `topics_details` text COLLATE utf8_unicode_ci,
  `details_order` int(11) NOT NULL,
  PRIMARY KEY (`topics_detail_id`),
  KEY `topics_id` (`topics_id`),
  KEY `topics_type` (`topics_type`),
  KEY `topics_details_title` (`topics_details_title`)
) ENGINE=InnoDB AUTO_INCREMENT=95 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `course_topics_details`
--

INSERT INTO `course_topics_details` (`topics_detail_id`, `topics_id`, `topics_type`, `topics_details_title`, `topics_details`, `details_order`) VALUES
(1, 2, '1', 'bootstrap alert', '<p>Bootstrap provides an easy way to display alert messages to users. An alert is a message box that can be used to display important information, warnings, or errors to the user. Here\'s an example of how to create an alert in Bootstrap:</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-csharp\"><code class=\"!whitespace-pre hljs language-csharp\"></code></code>\r\n<div class=\"hljs-keyword\">class=<span class=\"hljs-string\">\"alert alert-primary\"</span> role=<span class=\"hljs-string\">\"alert\"</span>> This <span class=\"hljs-keyword\">is</span> a primary alert—check it <span class=\"hljs-keyword\">out</span>!</div>\r\n<code class=\"!whitespace-pre hljs language-csharp\">\r\n</code></div>\r\n</div>\r\n<p>In this example, we create a basic alert using the <code>alert</code> class and the <code>alert-primary</code> class. The <code>role=\"alert\"</code> attribute is used to indicate to assistive technologies that this element represents an alert. You can replace the <code>alert-primary</code> class with any of the following classes to change the appearance of the alert:</p>\r\n<ul>\r\n<li><code>alert-primary</code>: Blue alert</li>\r\n<li><code>alert-secondary</code>: Gray alert</li>\r\n<li><code>alert-success</code>: Green alert</li>\r\n<li><code>alert-danger</code>: Red alert</li>\r\n<li><code>alert-warning</code>: Yellow alert</li>\r\n<li><code>alert-info</code>: Light blue alert</li>\r\n<li><code>alert-light</code>: Light gray alert</li>\r\n<li><strong><code>alert-dark</code>: Dark gray alert</strong></li>\r\n</ul>\r\n<p>You can also add additional styles to the alert using classes such as <code>alert-dismissible</code> (to add a close button to the alert), <code>fade</code> (to add a fade-in and fade-out effect to the alert), and <code>show</code> (to make the alert visible by default).</p>\r\n<p>Here\'s an example of a more complex alert with a close button:</p>', 2),
(9, 2, '3', 'mmmm', 'mmmm-12-2.jpg', 1),
(10, 2, '3', 'uuuu', 'uuuu-12-2.jpg', 4),
(11, 2, '2', 'php', 'namespace App\\Controllers;\r\n\r\nclass DashboardController extends BaseController\r\n{\r\n    protected $helpers = [\'form\', \'url\'];\r\n    protected $filters = [\'auth\'];\r\n\r\n    public function index()\r\n    {\r\n        return sohel;\r\n    }\r\n    public return ok;\r\n}', 5),
(13, 2, '2', 'php', 'namespace App\\Controllers;\r\n\r\nclass DashboardController extends BaseController\r\n{\r\n    protected $helpers = [\'form\', \'url\'];\r\n    protected $filters = [\'auth\'];\r\n\r\n    public function index()\r\n    {\r\n        return view(\'dashboard/index\');\r\n    }\r\n}', 5),
(14, 5, '2', 'Complete basics of Filters & Why we use it?', 'namespace App\\Controllers;\r\n\r\nclass DashboardController extends BaseController\r\n{\r\n    protected $helpers = [\'form\', \'url\'];\r\n    protected $filters = [\'auth\'];\r\n\r\n    public function index()\r\n    {\r\n        return view(\'dashboard/index\');\r\n    }\r\n}', 1),
(15, 6, '3', 'good', 'good-11-6.jpg', 1),
(16, 1, '1', 'good', '<p>Filters in CodeIgniter 4 are used to intercept HTTP requests and apply additional processing to them before they are handled by a controller method. Filters can be used for a variety of purposes, such as authentication, authorization, validation, and input filtering.</p>\r\n<p>Filters are defined as classes that implement the <code>CodeIgniter\\Filters\\FilterInterface</code> interface. Each filter class must define a <code>before()</code> method, which will be called by CodeIgniter before the controller method is executed.</p>\r\n<p>To use a filter in your application, you can define it in the <code>$filters</code> array in the <code>app/Config/Filters.php</code> file. For example:</p>\r\n<p>ok</p>', 1),
(17, 1, '3', 'killhim', 'killhim-12-1.jpg', 2),
(18, 9, '1', 'What we will learn', '<p>In the course \"Learn CodeIgniter 4 API Development Using JWT Authentication\", you will learn how to develop RESTful APIs using the CodeIgniter 4 framework and implement JSON Web Token (JWT) authentication to secure the APIs. Here is a summary of what you will learn in this course:</p>\r\n<ul>\r\n<li>Setting up a CodeIgniter 4 project and creating RESTful APIs</li>\r\n<li>Understanding HTTP requests and responses</li>\r\n<li>Implementing JWT authentication to secure the APIs</li>\r\n<li>Creating CRUD (Create, Read, Update, Delete) operations using RESTful APIs</li>\r\n<li>Uploading files and images to the server using RESTful APIs</li>\r\n<li>Handling errors and exceptions in the APIs</li>\r\n<li>Testing the APIs using Postman</li>\r\n</ul>\r\n<p>Throughout the course, you will work on practical examples and exercises to reinforce your learning. By the end of the course, you will have a good understanding of how to develop RESTful APIs with CodeIgniter 4 and implement JWT authentication, which is a widely used method for securing APIs.</p>', 1),
(19, 10, '1', 'CodeIgniter 4 Setup Installation', '<p>To install and set up CodeIgniter 4, follow these steps:</p>\r\n<ol>\r\n<li>Download CodeIgniter 4 from the official website (<a href=\"https://codeigniter.com/\" target=\"_new\">https://codeigniter.com/</a>).</li>\r\n<li>Extract the downloaded file to a folder on your computer.</li>\r\n<li>Open a command prompt or terminal window and navigate to the project folder.</li>\r\n<li>Run the command <code>php spark serve</code> to start the development server.</li>\r\n<li>Open a web browser and go to <code>http://localhost:8080</code> to see the default CodeIgniter welcome page.</li>\r\n</ol>\r\n<p>That\'s it! You now have CodeIgniter 4 installed and running on your computer. From here, you can start building your application by creating controllers, models, views, and routes.</p>\r\n<p>Note that before running the <code>php spark serve</code> command, you need to make sure that PHP and the required extensions (such as the mysqli extension for database connectivity) are installed on your computer. You can check this by running the command <code>php -v</code> in the command prompt or terminal window. If PHP is not installed, you can download it from the official website (<a href=\"https://www.php.net/downloads.php\" target=\"_new\">https://www.php.net/downloads.php</a>) and follow the installation instructions for your operating system.</p>', 1),
(21, 12, '1', 'Understand Application Default Landing Page', '<div class=\"flex flex-grow flex-col gap-3\">\r\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words\">\r\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\r\n<p>In CodeIgniter 4, the default landing page is the welcome page, which is displayed when you run the <code>php spark serve</code> command to start the development server and open a web browser to <code>http://localhost:8080</code>.</p>\r\n<p>The welcome page provides information on CodeIgniter 4, the latest version of the framework, and the recommended directory structure for your application.</p>\r\n<p>The welcome page also shows a list of available commands you can use with the <code>spark</code> command-line interface. It also includes links to the CodeIgniter documentation and the CodeIgniter forum, where you can find more information and get help if you need it.</p>\r\n<p>By default, CodeIgniter 4 uses the Model-View-Controller (MVC) architectural pattern to organize your application code. The <code>app/Controllers</code> folder contains the controller classes, which handle HTTP requests and generate responses. The <code>app/Models</code> folder contains the model classes, which interact with the database and represent the data used by your application. The <code>app/Views</code> folder contains the view files, which define the HTML markup and presentation of your application.</p>\r\n<p>Overall, the default landing page in CodeIgniter 4 is a useful starting point for understanding the basic structure of a CodeIgniter application and getting started with building your own application.</p>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"flex justify-between lg:block\"> </div>', 1),
(22, 13, '1', 'About PHP Spark CLI', '<p>PHP Spark CLI is a command-line interface tool that comes with CodeIgniter 4. It is used to perform various tasks related to CodeIgniter 4, such as creating controllers, models, views, and migrations, as well as generating documentation and running tests.</p>\r\n<p>The PHP Spark CLI tool is built on top of the popular Symfony Console component and provides a simple and intuitive command-line interface for CodeIgniter 4 developers. It is based on the concept of \"sparks\", which are self-contained packages that provide additional functionality to CodeIgniter 4.</p>\r\n<p>To use PHP Spark CLI, you need to have PHP installed on your computer and set up the appropriate environment variables. Once you have done this, you can run the <code>spark</code> command from the command line and specify the desired action and options.</p>\r\n<p>For example, to create a new controller, you can run the following command:</p>', 1),
(23, 13, '2', 'php', 'php spark make:controller MyController', 2),
(24, 13, '1', 'About PHP Spark CLI', '<p>This will create a new controller class named <code>MyController</code> in the <code>app/Controllers</code> directory.</p>\r\n<p>Overall, the PHP Spark CLI tool is a powerful and convenient tool for CodeIgniter 4 developers, allowing them to perform common tasks quickly and easily from the command line.</p>', 3),
(25, 14, '1', 'Create First Program', '<p>To create your first program in CodeIgniter 4, follow these steps:</p>\r\n<ol>\r\n<li>Open your preferred text editor or IDE.</li>\r\n<li>Create a new file named <code>Hello.php</code> in the <code>app/Controllers</code> directory.</li>\r\n<li>Add the following code to the <code>Hello.php</code> file:</li>\r\n</ol>', 1),
(26, 14, '2', 'php', '&lt;?php\r\n\r\nnamespace App\\Controllers;\r\n\r\nclass Hello extends BaseController\r\n{\r\n    public function index()\r\n    {\r\n        echo \'Hello, CodeIgniter 4!\';\r\n    }\r\n}', 2),
(27, 14, '1', 'Create First Program', '<ol start=\"4\">\r\n<li>Save the file.</li>\r\n<li>Open a web browser and go to <code>http://localhost:8080/hello</code> to see the output of your program.</li>\r\n</ol>\r\n<p>When you visit the <code>http://localhost:8080/hello</code> URL, CodeIgniter 4 will automatically route the request to the <code>index</code> method of the <code>Hello</code> controller class that you just created. The <code>index</code> method simply outputs the string <code>Hello, CodeIgniter 4!</code> to the browser.</p>\r\n<p>That\'s it! You have now created and run your first program in CodeIgniter 4. From here, you can continue learning about the framework and building more complex applications.</p>', 3),
(28, 15, '1', NULL, '<p>To connect a CodeIgniter 4 application to a database, you need to follow these steps:</p>\r\n<ol>\r\n<li>Open the <code>app/Config/Database.php</code> file.</li>\r\n<li>Set the appropriate values for the <code>hostname</code>, <code>username</code>, <code>password</code>, <code>database</code>, and <code>DBDriver</code> configuration options. For example:</li>\r\n</ol>', 1),
(29, 15, '2', 'php', 'public $default = [\r\n    \'DSN\'      => \'\',\r\n    \'hostname\' => \'localhost\',\r\n    \'username\' => \'myusername\',\r\n    \'password\' => \'mypassword\',\r\n    \'database\' => \'mydatabase\',\r\n    \'DBDriver\' => \'MySQLi\',\r\n    \'DBPrefix\' => \'\',\r\n    \'pConnect\' => false,\r\n    \'DBDebug\'  => (ENVIRONMENT !== \'production\'),\r\n    \'cacheOn\'  => false,\r\n    \'cacheDir\' => \'\',\r\n    \'charset\'  => \'utf8\',\r\n    \'DBCollat\' => \'utf8_general_ci\',\r\n    \'swapPre\'  => \'\',\r\n    \'encrypt\'  => false,\r\n    \'compress\' => false,\r\n    \'strictOn\' => false,\r\n    \'failover\' => [],\r\n    \'port\'     => 3306,\r\n];', 2),
(30, 15, '1', NULL, '<ol start=\"3\">\r\n<li>Save the file.</li>\r\n<li>To test the database connection, you can create a new controller and add the following code to the <code>index</code> method:</li>\r\n</ol>', 3),
(31, 15, '2', 'php', '&lt;?php\r\n\r\nnamespace App\\Controllers;\r\n\r\nclass Test extends BaseController\r\n{\r\n    public function index()\r\n    {\r\n        $db = \\Config\\Database::connect();\r\n        if ($db->connect_errno()) {\r\n            die(\'Failed to connect to database!\');\r\n        }\r\n        echo \'Connected successfully to database!\';\r\n    }\r\n}', 4),
(32, 15, '1', NULL, '<ol start=\"5\">\r\n<li>Save the file.</li>\r\n<li>Open a web browser and go to <code>http://localhost:8080/test</code> to see the output of your program.</li>\r\n</ol>\r\n<p>This will test the database connection and output a message indicating whether the connection was successful or not.</p>\r\n<p>Note that this is just a basic example of how to connect to a database in CodeIgniter 4. You can use the <code>Database</code> library to perform more complex database operations, such as querying the database and updating records. For more information, refer to the CodeIgniter 4 documentation on database connectivity.</p>', 5),
(33, 16, '1', NULL, '<p>In CodeIgniter 4, a migration is a way of managing changes to your application\'s database schema over time. Migrations allow you to version control your database schema and easily apply or roll back changes as needed.</p>\r\n<p>To use migrations in CodeIgniter 4, follow these steps:</p>\r\n<ol>\r\n<li>Create a new migration file by running the following command in the terminal:</li>\r\n</ol>', 1),
(34, 16, '2', 'php', 'php spark make:migration create_users_table', 2),
(35, 16, '1', NULL, '<p>This will create a new migration file named <code>2023XX_create_users_table.php</code> in the <code>app\\Database\\Migrations</code> directory, where <code>XX</code> is a number that increments for each new migration.</p>\r\n<ol start=\"2\">\r\n<li>Open the migration file and add the necessary code to define the changes you want to make to the database schema. For example:</li>\r\n</ol>', 3),
(36, 16, '2', 'php', '&lt;?php\r\n\r\nnamespace App\\Database\\Migrations;\r\n\r\nuse CodeIgniter\\Database\\Migration;\r\n\r\nclass CreateUsersTable extends Migration\r\n{\r\n    public function up()\r\n    {\r\n        $this->forge->addField([\r\n            \'id\' => [\r\n                \'type\' => \'INT\',\r\n                \'constraint\' => 5,\r\n                \'unsigned\' => true,\r\n                \'auto_increment\' => true\r\n            ],\r\n            \'name\' => [\r\n                \'type\' => \'VARCHAR\',\r\n                \'constraint\' => \'100\',\r\n            ],\r\n            \'email\' => [\r\n                \'type\' => \'VARCHAR\',\r\n                \'constraint\' => \'100\',\r\n            ],\r\n            \'created_at\' => [\r\n                \'type\' => \'DATETIME\',\r\n                \'null\' => true,\r\n            ],\r\n            \'updated_at\' => [\r\n                \'type\' => \'DATETIME\',\r\n                \'null\' => true,\r\n            ],\r\n        ]);\r\n        $this->forge->addKey(\'id\', true);\r\n        $this->forge->createTable(\'users\');\r\n    }\r\n\r\n    public function down()\r\n    {\r\n        $this->forge->dropTable(\'users\');\r\n    }\r\n}', 4),
(37, 16, '1', NULL, '<p>In this example, we are creating a new table named <code>users</code> with four columns: <code>id</code>, <code>name</code>, <code>email</code>, and <code>created_at</code>, <code>updated_at</code>. The <code>up()</code> method defines the changes to apply when migrating up, and the <code>down()</code> method defines the changes to apply when rolling back the migration.</p>\r\n<ol start=\"3\">\r\n<li>Save the migration file.</li>\r\n<li>Run the migration by running the following command in the terminal:</li>\r\n</ol>', 5),
(38, 16, '2', 'php', 'php spark migrate', 6),
(39, 16, '1', NULL, '<p>This will apply the changes defined in the migration file and create the <code>users</code> table in the database.</p>\r\n<p>You can also roll back a migration by running the following command in the terminal:</p>', 7),
(40, 16, '2', 'sql', 'php spark migrate:rollback', 8),
(41, 16, '1', NULL, '<p>This will undo the changes made by the most recent migration.</p>\r\n<p>Overall, migrations are a powerful tool for managing your application\'s database schema in a version-controlled way. By using migrations, you can easily track changes to your database schema and apply or roll back those changes as needed.</p>', 9),
(42, 17, '1', NULL, '<p>CodeIgniter 4 provides a powerful query builder library that allows you to build complex database queries using a simple, intuitive syntax. Here are the basic steps for using the query builder:</p>\r\n<ol>\r\n<li>Load the database library</li>\r\n</ol>\r\n<p>Before using the query builder, you need to load the database library by adding the following code in your controller:</p>', 1),
(43, 17, '2', 'php', '$builder = $this->db->table(\'my_table\');', 2),
(44, 17, '1', NULL, '<p>This will create a new instance of the query builder class and set the default table name.</p>\r\n<ol start=\"2\">\r\n<li>Select data</li>\r\n</ol>\r\n<p>You can use the <code>select()</code> method to specify the columns you want to retrieve from the database. For example:</p>', 3),
(45, 17, '2', 'php', '$builder->select(\'id, name, email\');', 4),
(46, 17, '1', NULL, '<p>This will select the <code>id</code>, <code>name</code>, and <code>email</code> columns from the database.</p>\r\n<ol start=\"3\">\r\n<li>From clause</li>\r\n</ol>\r\n<p>Use the <code>from()</code> method to specify the table from which you want to select data. For example:</p>', 5),
(47, 17, '2', 'php', '$builder->from(\'my_table\');', 6),
(48, 17, '1', NULL, '<p>This will select data from the <code>my_table</code> table.</p>\r\n<ol start=\"4\">\r\n<li>Where clause</li>\r\n</ol>\r\n<p>The <code>where()</code> method is used to add conditions to the query. For example:</p>', 7),
(49, 17, '2', 'php', '$builder->where(\'id\', 1);', 8),
(50, 17, '1', NULL, '<p>This will select data where the <code>id</code> column is equal to 1.</p>\r\n<p>You can also use logical operators to combine multiple conditions:</p>', 9),
(51, 17, '2', 'php', '$builder->where(\'id\', 1)->orWhere(\'name\', \'John\');', 10),
(52, 17, '1', NULL, '<p>This will select data where the <code>id</code> column is equal to 1 or the <code>name</code> column is equal to \"John\".</p>\r\n<ol start=\"5\">\r\n<li>Get data</li>\r\n</ol>\r\n<p>Finally, use the <code>get()</code> method to retrieve the data from the database:</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\">php</div>\r\n</div>', 11),
(53, 17, '2', 'php', '$results = $builder->get()->getResult();', 12),
(54, 17, '1', NULL, '<p>This will execute the query and return the results.</p>\r\n<p>You can also use other query builder methods such as <code>join()</code>, <code>groupby()</code>, <code>having()</code>, <code>orderby()</code>, and <code>limit()</code> to build more complex queries.</p>\r\n<p>Overall, the CodeIgniter 4 query builder provides a powerful and intuitive way to build database queries using a simple, object-oriented syntax. With a little practice, you can use it to build complex queries with ease.</p>', 13),
(55, 18, '1', NULL, '<p>In CodeIgniter 4, models are used to interact with the database and retrieve data. Here are the basic steps for working with models:</p>\r\n<ol>\r\n<li>Create a model</li>\r\n</ol>\r\n<p>Create a new file in the <code>app/Models</code> directory with the name of your model (e.g. <code>MyModel.php</code>). The model class should extend the <code>CodeIgniter\\Model</code> class and define the table name, primary key, and any other relevant properties. Here\'s an example:</p>', 1),
(56, 18, '2', 'php', 'namespace App\\Models;\r\n\r\nuse CodeIgniter\\Model;\r\n\r\nclass MyModel extends Model\r\n{\r\n    protected $table = \'my_table\';\r\n    protected $primaryKey = \'id\';\r\n    protected $allowedFields = [\'name\', \'email\'];\r\n}', 2),
(57, 18, '1', NULL, '<p>This model will interact with the <code>my_table</code> table, which has an <code>id</code> primary key and <code>name</code> and <code>email</code> columns.</p>\r\n<ol start=\"2\">\r\n<li>Retrieve data</li>\r\n</ol>\r\n<p>To retrieve data from the database using the model, you can use the <code>findAll()</code> method to retrieve all records, or <code>find()</code> method to retrieve a single record based on the primary key. Here are some examples:</p>', 3),
(58, 18, '2', 'php', '// Retrieve all records\r\n$model = new MyModel();\r\n$results = $model->findAll();\r\n\r\n// Retrieve a single record\r\n$result = $model->find(1);', 4),
(59, 18, '1', NULL, '<p>The <code>$results</code> variable will contain an array of records, while the <code>$result</code> variable will contain a single record.</p>\r\n<p>You can also use the model\'s query builder methods to build more complex queries:</p>', 5),
(60, 18, '2', 'php', '$model = new MyModel();\r\n$results = $model->where(\'name\', \'John\')->orderBy(\'id\', \'asc\')->findAll();', 6),
(61, 18, '1', NULL, '<p>This will retrieve all records where the <code>name</code> column is equal to \"John\", ordered by the <code>id</code> column in ascending order.</p>\r\n<ol start=\"3\">\r\n<li>Insert, update, and delete data</li>\r\n</ol>\r\n<p>To insert data into the database using the model, you can use the <code>insert()</code> method:</p>', 7),
(62, 18, '2', 'php', '$model = new MyModel();\r\n$data = [\r\n    \'name\' => \'John Doe\',\r\n    \'email\' => \'john@example.com\'\r\n];\r\n$model->insert($data);', 8),
(63, 18, '1', NULL, '<p>To update data, you can use the <code>update()</code> method:</p>\r\n<div class=\"bg-black rounded-md mb-4\"> </div>', 9),
(64, 18, '2', 'php', '$model = new MyModel();\r\n$data = [\r\n    \'name\' => \'Jane Doe\'\r\n];\r\n$model->update(1, $data);', 10),
(65, 18, '1', NULL, '<p>This will update the record with the primary key of 1, setting the <code>name</code> column to \"Jane Doe\".</p>\r\n<p>To delete data, you can use the <code>delete()</code> method:</p>', 11),
(66, 18, '2', 'php', '$model = new MyModel();\r\n$model->delete(1);', 12),
(67, 18, '1', NULL, '<p>This will delete the record with the primary key of 1.</p>\r\n<p>Overall, working with models in CodeIgniter 4 is a powerful and flexible way to interact with the database and retrieve, insert, update, and delete data.</p>', 13),
(68, 19, '1', NULL, '<p>In CodeIgniter 4, seeders are used to populate the database with sample or test data. Here\'s how to use them:</p>\r\n<ol>\r\n<li>Create a seeder</li>\r\n</ol>\r\n<p>Create a new file in the <code>app/Database/Seeds</code> directory with the name of your seeder (e.g. <code>UsersSeeder.php</code>). The seeder class should extend the <code>CodeIgniter\\Database\\Seeder</code> class and define the <code>run()</code> method, which will contain the code to insert data into the database. Here\'s an example:</p>\r\n<div class=\"bg-black rounded-md mb-4\"> </div>', 1),
(69, 19, '2', 'php', 'namespace App\\Database\\Seeds;\r\n\r\nuse CodeIgniter\\Database\\Seeder;\r\n\r\nclass UsersSeeder extends Seeder\r\n{\r\n    public function run()\r\n    {\r\n        $data = [\r\n            [\r\n                \'name\' => \'John Doe\',\r\n                \'email\' => \'john@example.com\',\r\n                \'password\' => password_hash(\'secret\', PASSWORD_DEFAULT)\r\n            ],\r\n            [\r\n                \'name\' => \'Jane Doe\',\r\n                \'email\' => \'jane@example.com\',\r\n                \'password\' => password_hash(\'secret\', PASSWORD_DEFAULT)\r\n            ]\r\n        ];\r\n\r\n        $this->db->table(\'users\')->insertBatch($data);\r\n    }\r\n}', 2),
(70, 19, '1', NULL, '<p>This seeder will insert two records into the <code>users</code> table.</p>\r\n<ol start=\"2\">\r\n<li>Run the seeder</li>\r\n</ol>\r\n<p>To run the seeder, you can use the <code>db:seed</code> command in the PHP Spark CLI. For example, to run the <code>UsersSeeder</code> seeder, you can use the following command:</p>', 3),
(71, 19, '2', 'sql', 'php spark db:seed UsersSeeder', 4),
(72, 19, '1', NULL, '<p>This will execute the <code>run()</code> method of the <code>UsersSeeder</code> class and insert the data into the <code>users</code> table.</p>\r\n<p>You can also use the <code>--all</code> option to run all seeders:</p>', 5),
(73, 19, '2', 'sql', 'php spark db:seed --all', 6),
(74, 19, '1', NULL, '<p>This will execute the <code>run()</code> method of all seeder classes in the <code>app/Database/Seeds</code> directory.</p>\r\n<p>Seeders are a useful tool for populating the database with initial data for testing and development purposes, and can be used in conjunction with migrations to create and maintain a database schema.</p>', 7),
(75, 20, '1', NULL, '<p>In CodeIgniter 4, routes are used to define how incoming requests should be handled. The framework provides several methods that can be used to define routes:</p>\r\n<ol>\r\n<li>\r\n<p><code>$routes->get($uri, $controllerMethod, [$options])</code>: Defines a route for HTTP GET requests. The <code>$uri</code> parameter is the URL path to match, the <code>$controllerMethod</code> parameter is the name of the controller method to invoke, and the optional <code>$options</code> parameter is an array of route options.</p>\r\n</li>\r\n<li>\r\n<p><code>$routes->post($uri, $controllerMethod, [$options])</code>: Defines a route for HTTP POST requests.</p>\r\n</li>\r\n<li>\r\n<p><code>$routes->put($uri, $controllerMethod, [$options])</code>: Defines a route for HTTP PUT requests.</p>\r\n</li>\r\n<li>\r\n<p><code>$routes->delete($uri, $controllerMethod, [$options])</code>: Defines a route for HTTP DELETE requests.</p>\r\n</li>\r\n<li>\r\n<p><code>$routes->options($uri, $controllerMethod, [$options])</code>: Defines a route for HTTP OPTIONS requests.</p>\r\n</li>\r\n<li>\r\n<p><code>$routes->match([\'get\', \'post\'], $uri, $controllerMethod, [$options])</code>: Defines a route that matches multiple HTTP methods.</p>\r\n</li>\r\n<li>\r\n<p><code>$routes->cli($command, $controllerMethod, [$options])</code>: Defines a route that only matches when the application is run from the command line.</p>\r\n</li>\r\n</ol>\r\n<p>In addition to these methods, there are several other methods that can be used to define routes with specific constraints, such as <code>group()</code>, <code>namespace()</code>, <code>prefix()</code>, and <code>subdomain()</code>. These methods can be used to organize routes and apply common middleware or parameters to groups of routes.</p>\r\n<p>Here\'s an example of how to define a basic route in CodeIgniter 4 using the <code>$routes->get()</code> method:</p>', 1),
(76, 20, '2', 'php', '$routes->get(\'/\', \'HomeController::index\');', 2),
(77, 20, '1', NULL, '<p>This route will match the root URL path and invoke the <code>index()</code> method of the <code>HomeController</code> class when an HTTP GET request is received.</p>\r\n<p>Routes are a powerful tool for defining the behavior of your application, and can be used to create SEO-friendly URLs, implement RESTful APIs, and more.</p>', 3),
(78, 21, '1', NULL, '<p>In CodeIgniter 4, a route group is a way to group related routes together and apply common attributes or middleware to all of them. This can be useful for organizing routes within your application and reducing duplication in your code.</p>\r\n<p>To define a route group, you can use the <code>$routes->group()</code> method. The first parameter is the URL prefix for the group, and the second parameter is a closure that defines the routes within the group. Here\'s an example:</p>', 1),
(79, 21, '2', 'php', '$routes->group(\'admin\', function($routes)\r\n{\r\n    $routes->get(\'/\', \'AdminController::index\');\r\n    $routes->get(\'users\', \'AdminController::users\');\r\n    $routes->get(\'posts\', \'AdminController::posts\');\r\n});', 2),
(80, 21, '1', NULL, '<p>This defines a route group with the URL prefix <code>/admin</code>. All of the routes defined within the closure will have this prefix automatically added to their URLs.</p>\r\n<p>You can also specify common attributes for all routes in the group using the <code>setHost()</code>, <code>setNamespace()</code>, <code>setSuffix()</code>, and <code>setDefaultNamespace()</code> methods. For example:</p>', 3),
(81, 21, '2', 'php', '$routes->group(\'admin\', function($routes)\r\n{\r\n    $routes->setNamespace(\'App\\Controllers\\Admin\');\r\n\r\n    $routes->get(\'/\', \'AdminController::index\');\r\n    $routes->get(\'users\', \'UserController::index\');\r\n    $routes->get(\'posts\', \'PostController::index\');\r\n});', 4),
(82, 21, '1', NULL, '<p>This sets the default namespace for all routes within the group to <code>App\\Controllers\\Admin</code>, so you don\'t need to specify it for each individual controller method.</p>\r\n<p>Route groups can also be nested to create more complex routing structures. For example:</p>', 5),
(83, 21, '2', 'php', '$routes->group(\'admin\', function($routes)\r\n{\r\n    $routes->group(\'users\', function($routes)\r\n    {\r\n        $routes->get(\'/\', \'UserController::index\');\r\n        $routes->get(\'add\', \'UserController::add\');\r\n        $routes->get(\'edit/(:num)\', \'UserController::edit/$1\');\r\n        $routes->post(\'save\', \'UserController::save\');\r\n    });\r\n});', 6),
(84, 21, '1', NULL, '<p>This creates a route group with the URL prefix <code>/admin/users</code>, and defines several routes within that group for managing user accounts.</p>\r\n<p>Route groups are a powerful tool for organizing and structuring your application\'s routing, and can help simplify your code and make it easier to maintain.</p>', 7),
(85, 22, '1', NULL, '<p>Route namespaces in CodeIgniter 4 allow you to group a set of controllers under a common namespace. This can be useful for organizing controllers in larger applications, where you may have many different controllers with different responsibilities.</p>\r\n<p>To define a namespace for a set of routes, you can use the <code>$routes->group()</code> method and specify the namespace using the <code>setNamespace()</code> method. For example:</p>', 1),
(86, 22, '2', 'php', 'Route namespaces in CodeIgniter 4 allow you to group a set of controllers under a common namespace. This can be useful for organizing controllers in larger applications, where you may have many different controllers with different responsibilities.\r\n\r\nTo define a namespace for a set of routes, you can use the $routes->group() method and specify the namespace using the setNamespace() method. For example:', 2),
(87, 22, '1', NULL, '<p>In this example, we have defined a route group with the URL prefix <code>/admin</code>. We have also specified a namespace of <code>App\\Controllers\\Admin</code> for all controllers within the group. This means that if we reference a controller in one of the routes within the group without specifying a namespace, CodeIgniter will look for it in the <code>App\\Controllers\\Admin</code> namespace.</p>\r\n<p>For example, the <code>UserController::index</code> controller method will be resolved to the <code>App\\Controllers\\Admin\\UserController::index</code> method.</p>\r\n<p>You can also use route namespaces in combination with route parameters to dynamically load controllers based on user input. For example:</p>', 3),
(88, 22, '2', 'php', '$routes->group(\'admin\', [\'namespace\' => \'App\\Controllers\'], function($routes)\r\n{\r\n    $routes->get(\'(:any)\', function($slug)\r\n    {\r\n        $controller = ucfirst($slug).\'Controller\';\r\n        return new $controller();\r\n    });\r\n});', 4),
(89, 22, '1', NULL, '<p>In this example, we have defined a route group with the URL prefix <code>/admin</code>. We have also specified a namespace of <code>App\\Controllers</code> for all controllers within the group. Finally, we have defined a route parameter of <code>(:any)</code> which will match any URL segment.</p>\r\n<p>In the route closure, we are dynamically constructing the controller name based on the value of the <code>(:any)</code> parameter, and then instantiating the controller using the <code>new</code> keyword. This allows us to load different controllers based on user input, without having to define a separate route for each one.</p>', 5),
(90, 23, '1', NULL, '<p>Filters in CodeIgniter 4 are used to intercept HTTP requests and apply additional processing to them before they are handled by a controller method. Filters can be used for a variety of purposes, such as authentication, authorization, validation, and input filtering.</p>\r\n<p>Filters are defined as classes that implement the <code>CodeIgniter\\Filters\\FilterInterface</code> interface. Each filter class must define a <code>before()</code> method, which will be called by CodeIgniter before the controller method is executed.</p>\r\n<p>To use a filter in your application, you can define it in the <code>$filters</code> array in the <code>app/Config/Filters.php</code> file. For example:</p>', 1),
(91, 23, '2', 'php', '$filters = [\r\n    \'auth\' => \\App\\Filters\\AuthFilter::class\r\n];', 2),
(92, 23, '1', NULL, '<p>In this example, we have defined a filter named <code>auth</code> that will be handled by the <code>App\\Filters\\AuthFilter</code> class.</p>\r\n<p>Once you have defined a filter, you can apply it to a controller method by adding the filter name to the <code>$filters</code> array in the controller\'s class definition. For example:</p>', 3),
(93, 23, '2', 'php', 'namespace App\\Controllers;\r\n\r\nclass DashboardController extends BaseController\r\n{\r\n    protected $helpers = [\'form\', \'url\'];\r\n    protected $filters = [\'auth\'];\r\n\r\n    public function index()\r\n    {\r\n        return view(\'dashboard/index\');\r\n    }\r\n}', 4),
(94, 23, '1', NULL, '<p>In this example, we have added the <code>auth</code> filter to the <code>index()</code> method of the <code>DashboardController</code> class. This means that when the user accesses the URL corresponding to the <code>index()</code> method, the <code>AuthFilter::before()</code> method will be called first, and the controller method will only be executed if the filter allows it.</p>\r\n<p>Filters can also be applied globally to all controllers in your application, or to a specific HTTP verb (e.g. <code>GET</code>, <code>POST</code>, etc.) or URL pattern. For more information on how to use filters in CodeIgniter 4, see the official documentation at <a href=\"https://codeigniter.com/user_guide/filters.html\" target=\"_new\">https://codeigniter.com/user_guide/filters.html</a>.</p>', 5);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
CREATE TABLE IF NOT EXISTS `users` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `full_name` varchar(55) DEFAULT NULL,
  `email` varchar(100) NOT NULL,
  `password` varchar(50) NOT NULL,
  `phone_number` varchar(11) DEFAULT NULL,
  `role_id` decimal(1,0) NOT NULL DEFAULT '0' COMMENT '0=User,1=Admin',
  `user_status` decimal(1,0) NOT NULL COMMENT '0=default,1=active,2=blocked',
  `added_on` datetime NOT NULL,
  `edited_on` datetime DEFAULT NULL,
  `operation_ip` varchar(20) NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `phone_number` (`phone_number`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`user_id`, `full_name`, `email`, `password`, `phone_number`, `role_id`, `user_status`, `added_on`, `edited_on`, `operation_ip`) VALUES
(1, 'Sohel Rana', 'mdsohelranacse@gmail.com', '7c3bfb4536e1c22f355321b7933d9446', '01775326442', '1', '1', '2022-01-29 23:25:48', '2022-02-28 21:56:14', '::1'),
(2, 'Rabeya Rana', 'rabeya00000@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', '01601326444', '1', '1', '2023-04-18 12:05:17', NULL, '');
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
